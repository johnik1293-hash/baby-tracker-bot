from __future__ import annotations

import asyncio
import logging
import os
from pathlib import Path

from fastapi import FastAPI, Request, Header, HTTPException, Query
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from aiogram.types import Update
from sqlalchemy.exc import SQLAlchemyError

from app.bot.runner import build_bot, build_dispatcher, setup_logging
from app.db.database import async_engine  # —Å–º. —Å–≤–æ–∏ –ø—É—Ç–∏, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
from app.db.models import Base            # –∑–¥–µ—Å—å metadata –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü

# ---------------------- –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ----------------------
BASE_DIR = Path(__file__).resolve().parent  # .../app/web
app = FastAPI(title="Baby Tracker WebApp")

# –°—Ç–∞—Ç–∏–∫–∞ –∏ —à–∞–±–ª–æ–Ω—ã –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç—è–º
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# ---------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
setup_logging()
logger = logging.getLogger(__name__)

# ---------------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()              # –ë–ï–ó –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ '/'
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()

# ---------------------- aiogram: Bot & Dispatcher ----------------------
bot = build_bot(TELEGRAM_BOT_TOKEN) if TELEGRAM_BOT_TOKEN else None
dp = build_dispatcher()

# –¶–µ–ª–µ–≤–æ–π URL –≤–µ–±—Ö—É–∫–∞ (–∑–∞–ø–æ–ª–Ω–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
TARGET_WEBHOOK: str | None = None


# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------
async def set_webhook_with_retry() -> None:
    """
    –°—Ç–∞–≤–∏—Ç (–∏–ª–∏ –ø–µ—Ä–µ-—Å—Ç–∞–≤–ª—è–µ—Ç) –≤–µ–±—Ö—É–∫ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –µ—Å–ª–∏ —Ö—É–∫ —É–∂–µ —Å—Ç–æ–∏—Ç ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç.
    """
    assert bot is not None and TARGET_WEBHOOK
    delay = 1
    for attempt in range(1, 6):  # –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫: 1, 2, 4, 8, 16 —Å–µ–∫
        try:
            info = await bot.get_webhook_info()
            if info.url != TARGET_WEBHOOK:
                await bot.set_webhook(
                    url=TARGET_WEBHOOK,
                    secret_token=(WEBHOOK_SECRET or None),
                    drop_pending_updates=False,  # –Ω–µ —Ç–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
                    allowed_updates=["message", "callback_query"],
                )
                logger.info("Webhook set to %s", TARGET_WEBHOOK)
            else:
                logger.info("Webhook already ok: %s", TARGET_WEBHOOK)
            return
        except Exception as e:  # noqa: BLE001
            logger.exception("set_webhook attempt %s failed: %s", attempt, e)
            await asyncio.sleep(delay)
            delay *= 2
    logger.error("Failed to set webhook after retries")


async def webhook_keeper() -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —á–∏–Ω–∏—Ç –≤–µ–±—Ö—É–∫.
    –ù—É–∂–Ω–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö, –≥–¥–µ –∏–Ω—Å—Ç–∞–Ω—Å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è.
    """
    while True:
        try:
            await set_webhook_with_retry()
        except Exception as e:  # noqa: BLE001
            logger.exception("webhook_keeper error: %s", e)
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç


# ---------------------- –•—É–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ----------------------
@app.on_event("startup")
async def on_startup() -> None:
    # 1) –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î (SQLite/Postgres) –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    try:
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("DB schema is ready.")
    except SQLAlchemyError:
        logger.exception("DB init failed")
        raise

    # 2) –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ + –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–æ—Ä–æ–∂–∞
    if bot and WEBHOOK_URL:
        global TARGET_WEBHOOK
        TARGET_WEBHOOK = f"{WEBHOOK_URL.rstrip('/')}/webhook/telegram"
        await set_webhook_with_retry()
        app.state.webhook_task = asyncio.create_task(webhook_keeper())
    else:
        logger.warning("Bot token or WEBHOOK_URL is empty; webhook will not be set.")


@app.on_event("shutdown")
async def on_shutdown() -> None:
    # –ù–ò–ß–ï–ì–û –ù–ï –£–î–ê–õ–Ø–ï–ú: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º webhook –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏,
    # —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—á–∏—â–∞–ª—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ.
    pass


# ---------------------- –ú–∞—Ä—à—Ä—É—Ç—ã WebApp ----------------------
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse(
        "index.html",
        {"request": request, "app_title": "Baby Tracker Mini App"},
    )


@app.get("/health")
async def health():
    return {"status": "ok"}


# ---------------------- –í–µ–±—Ö—É–∫ Telegram ----------------------
@app.post("/webhook/telegram")
async def telegram_webhook(
    request: Request,
    x_telegram_bot_api_secret_token: str | None = Header(default=None),
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if WEBHOOK_SECRET and x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ warning –∏ –ø—Ä–æ–ø—É—Å–∫,
        # –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ 403:
        raise HTTPException(status_code=403, detail="invalid secret")

    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return JSONResponse({"ok": True})


# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π debug-—ç–Ω–¥–ø–æ–π–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------------------
@app.get("/debug/ping")
async def debug_ping(chat_id: int = Query(...), text: str = Query("ping")):
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º.
    –£–î–ê–õ–ò–¢–ï –≤ –ø—Ä–æ–¥–µ –∏–ª–∏ –∑–∞—â–∏—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    """
    if not bot:
        raise HTTPException(status_code=500, detail="Bot is not configured")
    from aiogram.exceptions import TelegramBadRequest
    try:
        await bot.send_message(chat_id=chat_id, text=f"üîî {text}")
        return {"ok": True}
    except TelegramBadRequest as e:
        logger.exception("send_message failed")
        raise HTTPException(status_code=400, detail=str(e))


# ---------------------- –†—É—á–Ω–æ–π —Å–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------------------
@app.post("/admin/reset-webhook")
async def reset_webhook(authorization: str | None = Header(None)):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫:
    curl -X POST https://<–¥–æ–º–µ–Ω>/admin/reset-webhook \
      -H "Authorization: Bearer <WEBHOOK_SECRET>"
    """
    if not WEBHOOK_SECRET or authorization != f"Bearer {WEBHOOK_SECRET}":
        raise HTTPException(status_code=403, detail="forbidden")
    if not bot or not TARGET_WEBHOOK:
        raise HTTPException(status_code=500, detail="bot or webhook url is not ready")
    await set_webhook_with_retry()
    return {"ok": True, "url": TARGET_WEBHOOK}
