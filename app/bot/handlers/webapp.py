from __future__ import annotations

import json
from datetime import datetime

from aiogram import Router, F, types
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Baby, UserSettings, SleepRecord, FeedingRecord

router = Router(name="webapp")


# --- helpers ---

async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    q = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = q.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name
        )
        session.add(user)
        await session.flush()
    return user

async def _get_active_baby(session: AsyncSession, user_id: int) -> Baby | None:
    qs = await session.execute(select(UserSettings).where(UserSettings.user_id == user_id))
    settings = qs.scalar_one_or_none()
    if settings and settings.active_baby_id:
        qb = await session.execute(select(Baby).where(Baby.id == settings.active_baby_id, Baby.user_id == user_id))
        b = qb.scalar_one_or_none()
        if b: return b
    qb = await session.execute(select(Baby).where(Baby.user_id == user_id).order_by(Baby.id.asc()).limit(1))
    return qb.scalar_one_or_none()

async def _get_open_sleep(session: AsyncSession, baby_id: int) -> SleepRecord | None:
    q = await session.execute(
        select(SleepRecord)
        .where(SleepRecord.baby_id == baby_id, SleepRecord.sleep_end.is_(None))
        .order_by(SleepRecord.sleep_start.desc())
        .limit(1)
    )
    return q.scalar_one_or_none()


# --- handler ---

@router.message(F.web_app_data)
async def handle_webapp_data(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ Telegram.WebApp.sendData(...)"""
    try:
        payload = json.loads(message.web_app_data.data)
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp.")
        return

    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)

        if not baby:
            await message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª.")
            return

        t = payload.get("type")

        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–∏–Ω–≥
        if t == "ping":
            msg = payload.get("message", "–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")
            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ WebApp: {msg}")
            return

        # –°–æ–Ω: –Ω–∞—á–∞–ª–æ
        if t == "sleep_start":
            open_rec = await _get_open_sleep(session, baby.id)
            if open_rec:
                await message.answer("–£–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ—Å–Ω—É–ª—Å—è¬ª –≤ –±–æ—Ç–µ –∏–ª–∏ –≤ WebApp.")
                return
            rec = SleepRecord(baby_id=baby.id, sleep_start=datetime.now())
            session.add(rec)
            await session.commit()
            await message.answer("üõå –°–æ–Ω: —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∞–Ω (–∏–∑ WebApp).")
            return

        # –°–æ–Ω: –∫–æ–Ω–µ—Ü
        if t == "sleep_end":
            rec = await _get_open_sleep(session, baby.id)
            if not rec:
                await message.answer("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–Ω.")
                return
            rec.sleep_end = datetime.now()
            rec.duration_minutes = int((rec.sleep_end - rec.sleep_start).total_seconds() // 60)
            await session.commit()
            await message.answer(f"‚úÖ –°–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω: {rec.duration_minutes} –º–∏–Ω (–∏–∑ WebApp).")
            return

        # –ö–æ—Ä–º–ª–µ–Ω–∏–µ
        if t == "feeding":
            feeding_type = payload.get("feeding_type")
            amount_ml = payload.get("amount_ml")
            amount_g = payload.get("amount_g")

            if feeding_type not in {"breast", "formula", "water", "solid"}:
                await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ—Ä–º–ª–µ–Ω–∏—è.")
                return

            rec = FeedingRecord(
                baby_id=baby.id,
                feeding_type=feeding_type,
                amount_ml=amount_ml,
                amount_g=amount_g
            )
            session.add(rec)
            await session.commit()

            human = {
                "breast": "–ì—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ",
                "formula": "–°–º–µ—Å—å",
                "water": "–í–æ–¥–∞",
                "solid": "–ü—Ä–∏–∫–æ—Ä–º"
            }[feeding_type]
            tail = f" ‚Äî {amount_ml} –º–ª" if amount_ml else (f" ‚Äî {amount_g} –≥" if amount_g else "")
            await message.answer(f"üçΩ {human}{tail} (–∏–∑ WebApp) ‚Äî –∑–∞–ø–∏—Å–∞–Ω–æ.")
            return

    # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
    await message.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Ç WebApp –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.")
