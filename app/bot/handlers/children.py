# app/bot/handlers/children.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select

# –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä get_session()
from app.db.database import get_session
from app.db.models import User, Baby  # –∑–∞–º–µ–Ω–∏—Ç–µ Baby –Ω–∞ –≤–∞—à—É –º–æ–¥–µ–ª—å Child, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

router = Router(name=__name__)


async def _ensure_user(tg_id: int) -> User:
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == tg_id))
        if user:
            return user

        user = User(telegram_id=tg_id)
        session.add(user)
        await session.commit()
        await session.refresh(user)
        return user


def _children_menu_kb(has_kids: bool) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞", callback_data="child:add")
    if has_kids:
        kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="child:edit")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="child:back")
    kb.adjust(1, 1, 1)
    return kb


@router.message(F.text.in_({"üë∂ –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞"}))
async def children_entry(message: Message, state: FSMContext) -> None:
    user = await _ensure_user(message.from_user.id)

    async with get_session() as session:
        result = await session.execute(
            select(Baby).where(Baby.user_id == user.id).order_by(Baby.id.desc())
        )
        babies = result.scalars().all()

    if babies:
        lines = ["–í–∞—à–∏ –¥–µ—Ç–∏:"]
        for b in babies:
            name = getattr(b, "name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            dob = getattr(b, "birth_date", None)
            lines.append(f"‚Ä¢ {name}" + (f" (—Ä–æ–∂–¥—ë–Ω(–∞) {dob})" if dob else ""))
        text = "\n".join(lines)
    else:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞."

    kb = _children_menu_kb(has_kids=bool(babies))
    await message.answer(text, reply_markup=kb.as_markup())


@router.callback_query(F.data == "child:back")
async def child_back(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await callback.answer()


@router.callback_query(F.data == "child:add")
async def child_add(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await callback.message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî –¥–æ–±–∞–≤–∏–º —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."
    )


@router.callback_query(F.data == "child:edit")
async def child_edit(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await callback.message.answer(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –≤—ã–±–æ—Ä —Ä–µ–±—ë–Ω–∫–∞ –∏ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    )
