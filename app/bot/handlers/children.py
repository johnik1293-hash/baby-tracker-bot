# app/bot/handlers/children.py
from __future__ import annotations

from datetime import datetime, date
from typing import Optional

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Baby, UserSettings

router = Router(name="children")

# -------- states --------
class AddBabyStates(StatesGroup):
    waiting_name = State()
    waiting_birthdate = State()

# -------- helpers --------
async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    q = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = q.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name,
        )
        session.add(user)
        await session.flush()
    return user

def children_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞", callback_data="child_add")],
        [InlineKeyboardButton(text="üë∂ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ", callback_data="child_choose")],
    ])

def back_main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def babies_list_kb(pairs: list[tuple[int, str]]) -> InlineKeyboardMarkup:
    # pairs: [(id, "–ò–º—è (–¥–∞—Ç–∞)"), ...]
    rows = [[InlineKeyboardButton(text=label, callback_data=f"child_set_{bid}")] for bid, label in pairs]
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="child_back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _fmt_date(d: Optional[date]) -> str:
    return d.strftime("%d.%m.%Y") if d else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

# -------- entry points --------
@router.message(F.text.in_({"üë∂ –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞"}))
@router.message(Command("children"))
async def children_entry(message: types.Message, state: FSMContext):
    await state.clear()
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)

        # –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫
        s = await session.execute(select(UserSettings).where(UserSettings.user_id == user.id))
        settings = s.scalar_one_or_none()

        active_label = "–Ω–µ –≤—ã–±—Ä–∞–Ω"
        if settings and settings.active_baby_id:
            b = await session.execute(select(Baby).where(Baby.id == settings.active_baby_id))
            bb = b.scalar_one_or_none()
            if bb:
                active_label = f"{bb.name} (–¥—Ä: {_fmt_date(bb.birth_date)})"

        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
        q = await session.execute(select(Baby).where(Baby.user_id == user.id))
        babies = q.scalars().all()

    text = (
        "üë∂ <b>–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–π: <b>{active_label}</b>\n"
        f"–í—Å–µ–≥–æ –¥–µ—Ç–µ–π: <b>{len(babies)}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(text, reply_markup=children_menu_kb())

# -------- add baby flow --------
@router.callback_query(F.data == "child_add")
async def child_add_start(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(AddBabyStates.waiting_name)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è</b> —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=None)

@router.message(AddBabyStates.waiting_name)
async def child_add_name(message: types.Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return
    await state.update_data(name=name)
    await state.set_state(AddBabyStates.waiting_birthdate)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code>\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=back_main_kb()
    )

@router.message(AddBabyStates.waiting_birthdate)
async def child_add_birthdate(message: types.Message, state: FSMContext):
    raw = (message.text or "").strip()
    birth: Optional[date] = None

    if raw.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        try:
            birth = datetime.strptime(raw, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –≤–∏–¥–µ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return

    data = await state.get_data()
    name = data["name"]

    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)

        baby = Baby(user_id=user.id, name=name, birth_date=birth)
        session.add(baby)
        await session.flush()

        # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –Ω–∞–∑–Ω–∞—á–∏–º —ç—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
        s = await session.execute(select(UserSettings).where(UserSettings.user_id == user.id))
        settings = s.scalar_one_or_none()
        if not settings:
            settings = UserSettings(user_id=user.id, active_baby_id=baby.id)
            session.add(settings)
        elif not settings.active_baby_id:
            settings.active_baby_id = baby.id

        await session.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ –†–µ–±—ë–Ω–æ–∫ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω (–¥—Ä: {_fmt_date(birth)}).\n"
        "–ï–≥–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º.",
        reply_markup=back_main_kb()
    )

# -------- choose active baby --------
@router.callback_query(F.data == "child_choose")
async def child_choose(cb: types.CallbackQuery):
    async for session in get_session():
        user = await _get_or_create_user(session, cb.from_user)
        q = await session.execute(select(Baby).where(Baby.user_id == user.id).order_by(Baby.id.asc()))
        babies = q.scalars().all()

    if not babies:
        await cb.answer()
        await cb.message.answer("–ù–µ—Ç –¥–µ—Ç–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–±—ë–Ω–∫–∞: ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª ‚Üí ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞¬ª.")
        return

    pairs = []
    for b in babies:
        label = f"{b.name} (–¥—Ä: {_fmt_date(b.birth_date)})"
        pairs.append((b.id, label))

    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=babies_list_kb(pairs))

@router.callback_query(F.data.startswith("child_set_"))
async def child_set_active(cb: types.CallbackQuery):
    baby_id = int(cb.data.split("_")[-1])
    async for session in get_session():
        user = await _get_or_create_user(session, cb.from_user)

        s = await session.execute(select(UserSettings).where(UserSettings.user_id == user.id))
        settings = s.scalar_one_or_none()
        if not settings:
            settings = UserSettings(user_id=user.id, active_baby_id=baby_id)
            session.add(settings)
        else:
            settings.active_baby_id = baby_id

        await session.commit()

        bq = await session.execute(select(Baby).where(Baby.id == baby_id))
        b = bq.scalar_one_or_none()

    name = b.name if b else "‚Äî"
    await cb.answer("–í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫")
    await cb.message.edit_text(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫: <b>{name}</b>", reply_markup=children_menu_kb())

@router.callback_query(F.data == "child_back")
async def child_back(cb: types.CallbackQuery):
    await cb.answer()
    await cb.message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=children_menu_kb())
