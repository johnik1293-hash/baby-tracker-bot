from __future__ import annotations

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Family, FamilyMember

router = Router(name="family")

# ---------- helpers ----------

def family_menu_kb(has_family: bool) -> InlineKeyboardMarkup:
    if has_family:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏", callback_data="fam_members")],
            [InlineKeyboardButton(text="üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ –∫–æ–¥—É", callback_data="fam_invite")],
            [InlineKeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ–º—å—é", callback_data="fam_leave")],
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", callback_data="fam_create")],
            [InlineKeyboardButton(text="üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="fam_join")],
        ])


async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    res = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = res.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name,
        )
        session.add(user)
        await session.flush()
    return user


async def _get_user_family(session: AsyncSession, user_id: int) -> Family | None:
    q = (
        select(Family)
        .join(FamilyMember, FamilyMember.family_id == Family.id)
        .where(FamilyMember.user_id == user_id)
        .limit(1)
    )
    res = await session.execute(q)
    return res.scalar_one_or_none()


# ---------- entry ----------

@router.message(F.text.in_({"üë®‚Äçüë©‚Äçüëß –°–µ–º—å—è", "–°–µ–º—å—è"}))
async def family_menu(message: types.Message):
    # –í–ê–ñ–ù–û: –±–µ—Ä—ë–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ async for, –∞ –Ω–µ session = get_session()
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        fam = await _get_user_family(session, user.id)

        if fam:
            # –ø–æ—Å—á–∏—Ç–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            mem_q = await session.execute(
                select(FamilyMember).where(FamilyMember.family_id == fam.id)
            )
            members = mem_q.scalars().all()
            text = (
                f"üè† –í–∞—à–∞ —Å–µ–º—å—è: <b>{fam.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(members)}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            kb = family_menu_kb(has_family=True)
        else:
            text = (
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ–º—å–∏.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:"
            )
            kb = family_menu_kb(has_family=False)

    await message.answer(text, reply_markup=kb)


# ---------- callbacks ----------

@router.callback_query(F.data == "fam_create")
async def fam_create(cb: types.CallbackQuery):
    async for session in get_session():
        user = await _get_or_create_user(session, cb.from_user)
        # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–µ–º—å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –º–µ–Ω—é
        fam = await _get_user_family(session, user.id)
        if fam:
            await cb.answer("–°–µ–º—å—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞")
            await family_menu(cb.message)
            return

        fam = Family(name=f"–°–µ–º—å—è {user.first_name or user.username or user.telegram_id}")
        session.add(fam)
        await session.flush()

        session.add(FamilyMember(family_id=fam.id, user_id=user.id, role="owner"))
        await session.commit()

    await cb.answer("–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞")
    await family_menu(cb.message)


@router.callback_query(F.data == "fam_members")
async def fam_members(cb: types.CallbackQuery):
    async for session in get_session():
        user = await _get_or_create_user(session, cb.from_user)
        fam = await _get_user_family(session, user.id)
        if not fam:
            await cb.answer()
            await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.")
            return

        mem_q = await session.execute(
            select(FamilyMember, User)
            .join(User, User.id == FamilyMember.user_id)
            .where(FamilyMember.family_id == fam.id)
            .order_by(FamilyMember.id.asc())
        )
        rows = mem_q.all()

    lines = ["üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ–º—å–∏</b>:"]
    for m, u in rows:
        who = u.first_name or u.username or str(u.telegram_id)
        role = m.role or "member"
        lines.append(f"‚Ä¢ {who} ‚Äî {role}")

    await cb.answer()
    await cb.message.answer("\n".join(lines))


@router.callback_query(F.data == "fam_invite")
async def fam_invite(cb: types.CallbackQuery):
    async for session in get_session():
        user = await _get_or_create_user(session, cb.from_user)
        fam = await _get_user_family(session, user.id)
        if not fam:
            await cb.answer()
            await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
            return

        # –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ = id —Å–µ–º—å–∏ (–¥–ª—è MVP)
        code = str(fam.id)

    await cb.answer()
    await cb.message.answer(
        "üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–µ–º—å—é:\n"
        f"–ö–æ–¥: <code>{code}</code>\n\n"
        "–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å ¬´–°–µ–º—å—è¬ª ‚Üí ¬´–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è¬ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥."
    )


@router.callback_query(F.data == "fam_join")
async def fam_join_prompt(cb: types.CallbackQuery):
    await cb.answer()
    await cb.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º <b>–∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</b> (—á–∏—Å–ª–æ). "
        "–Ø –¥–æ–±–∞–≤–ª—é –≤–∞—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–º—å—é."
    )


@router.message(F.text.regexp(r"^\d{1,12}$"))
async def fam_join_apply(message: types.Message):
    code = int(message.text.strip())
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)

        # –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Å–µ–º—å—è?
        res = await session.execute(select(Family).where(Family.id == code))
        fam = res.scalar_one_or_none()
        if not fam:
            await message.answer("‚ùå –°–µ–º—å—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫?
        res = await session.execute(
            select(FamilyMember).where(
                FamilyMember.family_id == fam.id,
                FamilyMember.user_id == user.id,
            )
        )
        exists = res.scalar_one_or_none()
        if exists:
            await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–µ–º—å–∏.")
            return

        session.add(FamilyMember(family_id=fam.id, user_id=user.id, role="member"))
        await session.commit()

    await message.answer(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ: <b>{fam.name or fam.id}</b>")
    # –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é —Å–µ–º—å–∏
    await family_menu(message)


@router.callback_query(F.data == "fam_leave")
async def fam_leave(cb: types.CallbackQuery):
    async for session in get_session():
        user = await _get_or_create_user(session, cb.from_user)
        fam = await _get_user_family(session, user.id)
        if not fam:
            await cb.answer()
            await cb.message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
            return

        # —É–¥–∞–ª—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ
        res = await session.execute(
            select(FamilyMember)
            .where(
                FamilyMember.family_id == fam.id,
                FamilyMember.user_id == user.id,
            )
        )
        m = res.scalar_one_or_none()
        if m:
            await session.delete(m)
            await session.commit()

    await cb.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–µ–º—å–∏")
    await family_menu(cb.message)
