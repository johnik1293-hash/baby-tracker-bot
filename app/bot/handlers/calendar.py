from __future__ import annotations

from aiogram import Router, F, types
from sqlalchemy import select, desc
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Baby, Sleep, Feeding, CareLog  # –µ—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç ‚Äî —É–±–µ—Ä–∏ –∏—Ö –∏–∑ –∏–º–ø–æ—Ä—Ç–∞

router = Router(name="calendar")

CALENDAR_ROWS = 15


async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    """–ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id."""
    res = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = res.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name,
        )
        session.add(user)
        await session.flush()
    return user


def _fmt(label: str, when, extra: str = "") -> str:
    ts = when.strftime("%d.%m %H:%M")
    return f"‚Ä¢ {ts} ‚Äî {label}" + (f" ({extra})" if extra else "")


@router.message(F.text.in_({"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"}))
async def calendar_last(message: types.Message):
    """–°–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π: —Å–æ–Ω, –∫–æ—Ä–º–ª–µ–Ω–∏—è, –∑–∞–±–æ—Ç–∞."""
    # –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∞–µ–º AsyncSession —á–µ—Ä–µ–∑ async for
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (MVP). –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å active_baby_id ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å –µ–≥–æ.
        res_baby = await session.execute(
            select(Baby).where(Baby.user_id == user.id).order_by(Baby.id.asc()).limit(1)
        )
        baby = res_baby.scalar_one_or_none()

        lines: list[str] = []
        lines.append("üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>")

        # --- –°–æ–Ω ---
        try:
            q_sleep = select(Sleep).order_by(desc(Sleep.start_time)).limit(CALENDAR_ROWS)
            if baby:
                q_sleep = q_sleep.where(Sleep.baby_id == baby.id)
            res_sleep = await session.execute(q_sleep)
            sleeps = res_sleep.scalars().all()
            if sleeps:
                lines.append("\n<b>–°–æ–Ω:</b>")
                for s in sleeps:
                    if s.end_time:
                        mins = int((s.end_time - s.start_time).total_seconds() // 60)
                        lines.append(_fmt("–°–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω", s.end_time, extra=f"~{mins} –º–∏–Ω"))
                    else:
                        lines.append(_fmt("–°–æ–Ω –Ω–∞—á–∞—Ç", s.start_time))
        except Exception:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ Sleep –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —Å–µ–∫—Ü–∏—é
            pass

        # --- –ö–æ—Ä–º–ª–µ–Ω–∏—è ---
        try:
            q_feed = select(Feeding).order_by(desc(Feeding.created_at)).limit(CALENDAR_ROWS)
            if baby:
                q_feed = q_feed.where(Feeding.baby_id == baby.id)
            res_feed = await session.execute(q_feed)
            feeds = res_feed.scalars().all()
            if feeds:
                lines.append("\n<b>–ö–æ—Ä–º–ª–µ–Ω–∏–µ:</b>")
                for f in feeds:
                    extra = "; ".join(
                        x for x in [
                            f.type or "",
                            f"{f.amount_ml} –º–ª" if getattr(f, "amount_ml", None) else ""
                        ] if x
                    )
                    lines.append(_fmt("–ö–æ—Ä–º–ª–µ–Ω–∏–µ", f.created_at, extra=extra))
        except Exception:
            pass

        # --- –£—Ö–æ–¥ (–æ–±—â–∏–π –∂—É—Ä–Ω–∞–ª) ---
        try:
            q_care = select(CareLog).order_by(desc(CareLog.created_at)).limit(CALENDAR_ROWS)
            if baby:
                q_care = q_care.where(CareLog.baby_id == baby.id)
            res_care = await session.execute(q_care)
            cares = res_care.scalars().all()
            if cares:
                lines.append("\n<b>–£—Ö–æ–¥:</b>")
                for c in cares:
                    lines.append(_fmt(c.action or "–î–µ–π—Å—Ç–≤–∏–µ", c.created_at, extra=c.note or ""))
        except Exception:
            pass

    await message.answer("\n".join(lines) if lines else "–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
