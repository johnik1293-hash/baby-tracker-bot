# app/bot/handlers/calendar.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select, desc

from app.db.database import AsyncSessionLocal
from app.db.models import User  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ç–æ—á–Ω–æ –µ—Å—Ç—å

router = Router(name=__name__)


# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.
# –ü–æ–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Event, Log, Activity).
try:
    from app.db.models import CareLog as EventModel  # noqa: F401
except Exception:
    EventModel = None  # fallback ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç


@router.message(F.text.in_({"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"}))
async def calendar_last(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —Å–µ–º—å–∏), –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π –µ—Å—Ç—å."""
    if EventModel is None:
        await message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π (CareLog).")
        return

    tg_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        user = await session.scalar(select(User).where(User.telegram_id == tg_id))
        if not user:
            user = User(telegram_id=tg_id)
            session.add(user)
            await session.commit()
            await session.refresh(user)

        # –ü–æ–¥ –≤–∞—à–∏ –ø–æ–ª—è: –ø–æ–ø—Ä–æ–±—É–µ–º 1) –ø–æ family_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, 2) –ø–æ user_id, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ.
        q = None
        if hasattr(EventModel, "family_id") and getattr(user, "family_id", None):
            q = select(EventModel).where(
                EventModel.family_id == user.family_id
            ).order_by(desc(getattr(EventModel, "created_at", "id")))
        elif hasattr(EventModel, "user_id"):
            q = select(EventModel).where(
                EventModel.user_id == user.id
            ).order_by(desc(getattr(EventModel, "created_at", "id")))

        if q is None:
            await message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—è –º–æ–¥–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π (–Ω—É–∂–µ–Ω family_id –∏–ª–∏ user_id).")
            return

        result = await session.execute(q.limit(10))
        events = result.scalars().all()

    if not events:
        await message.answer("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å, –∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.")
        return

    lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"]
    for e in events:
        ts = getattr(e, "created_at", None) or getattr(e, "timestamp", None) or ""
        title = getattr(e, "title", None) or getattr(e, "event_type", None) or "–°–æ–±—ã—Ç–∏–µ"
        detail = getattr(e, "note", None) or getattr(e, "description", None) or ""
        if detail:
            lines.append(f"‚Ä¢ {title} ‚Äî {detail} {f'({ts})' if ts else ''}")
        else:
            lines.append(f"‚Ä¢ {title} {f'({ts})' if ts else ''}")

    await message.answer("\n".join(lines))
