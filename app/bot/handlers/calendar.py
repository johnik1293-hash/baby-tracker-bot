# app/bot/handlers/calendar.py
from __future__ import annotations

from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import Message

from sqlalchemy import select
from app.db.database import AsyncSessionLocal
from app.db.models import User, Feeding, Sleep, CareLog  # –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏

router = Router(name=__name__)

def _fmt_dt(dt: datetime) -> str:
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc).strftime("%d.%m %H:%M")

@router.message(F.text.in_({"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"}))
async def calendar_last(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ–º—å–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    tg_id = message.from_user.id
    now = datetime.utcnow().replace(tzinfo=timezone.utc)
    since = now - timedelta(hours=24)

    async with AsyncSessionLocal() as session:
        user = await session.scalar(select(User).where(User.telegram_id == tg_id))
        if not user:
            user = User(telegram_id=tg_id)
            session.add(user)
            await session.commit()
            await session.refresh(user)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–º—å–∏ ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ family_id; –∏–Ω–∞—á–µ –ø–æ user_id
        # –ù–∏–∂–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫; –ø–æ–¥—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è:

        feedings = []
        sleeps = []
        cares = []

        try:
            feedings = (await session.execute(
                select(Feeding)
                .where(Feeding.user_id == user.id)
                .where(Feeding.created_at >= since)
                .order_by(Feeding.created_at.desc())
                .limit(10)
            )).scalars().all()
        except Exception:
            pass

        try:
            sleeps = (await session.execute(
                select(Sleep)
                .where(Sleep.user_id == user.id)
                .where(Sleep.start_at >= since)
                .order_by(Sleep.start_at.desc())
                .limit(10)
            )).scalars().all()
        except Exception:
            pass

        try:
            cares = (await session.execute(
                select(CareLog)
                .where(CareLog.user_id == user.id)
                .where(CareLog.created_at >= since)
                .order_by(CareLog.created_at.desc())
                .limit(10)
            )).scalars().all()
        except Exception:
            pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (24—á):"]
    if feedings:
        lines.append("\nüçΩ –ö–æ—Ä–º–ª–µ–Ω–∏—è:")
        for f in feedings:
            lines.append(f"‚Ä¢ {_fmt_dt(f.created_at)} ‚Äî {getattr(f, 'amount_ml', '')} –º–ª".strip())
    if sleeps:
        lines.append("\nüò¥ –°–æ–Ω:")
        for s in sleeps:
            end = getattr(s, "end_at", None)
            if end:
                lines.append(f"‚Ä¢ {_fmt_dt(s.start_at)} ‚Üí {_fmt_dt(end)}")
            else:
                lines.append(f"‚Ä¢ {_fmt_dt(s.start_at)} ‚Üí ‚Ä¶ (–µ—â—ë —Å–ø–∏—Ç)")
    if cares:
        lines.append("\nüß∑ –£—Ö–æ–¥:")
        for c in cares:
            typ = getattr(c, "type", "")
            lines.append(f"‚Ä¢ {_fmt_dt(c.created_at)} ‚Äî {typ}")

    if len(lines) == 1:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")

    await message.answer("\n".join(lines))
