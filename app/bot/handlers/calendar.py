from __future__ import annotations

from aiogram import Router, F, types
from sqlalchemy import select, desc
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import (
    User,
    Sleep,
    Feeding,
    CareLog,
    Baby,
)

router = Router(name="calendar")

# –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
CALENDAR_ROWS = 15


async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ User –≤ –ë–î –ø–æ telegram_id (MVP)."""
    res = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = res.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name,
        )
        session.add(user)
        await session.flush()
    return user


def _format_row(label: str, when, extra: str = "") -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    ts = when.strftime("%d.%m %H:%M")
    if extra:
        return f"‚Ä¢ {ts} ‚Äî {label} ({extra})"
    return f"‚Ä¢ {ts} ‚Äî {label}"


@router.message(F.text.in_({"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"}))
async def calendar_last(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å–µ–º—å–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ (–Ω–∞—á–∞–ª/–∑–∞–∫–æ–Ω—á–∏–ª)
    - –∫–æ—Ä–º–ª–µ–Ω–∏—è
    - –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–±—â–µ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞–±–æ—Ç—ã (CareLog)
    """
    # –í–ê–ñ–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ)
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –ª—é–±–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –∫–∞–∫ MVP
        res_baby = await session.execute(
            select(Baby).where(Baby.user_id == user.id).order_by(Baby.id.asc()).limit(1)
        )
        baby = res_baby.scalar_one_or_none()

        lines: list[str] = []
        lines.append("üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>")

        # 1) –°–æ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
        q_sleep = (
            select(Sleep)
            .order_by(desc(Sleep.start_time))
            .limit(CALENDAR_ROWS)
        )
        if baby:
            q_sleep = q_sleep.where(Sleep.baby_id == baby.id)
        res_sleep = await session.execute(q_sleep)
        sleeps = res_sleep.scalars().all()
        if sleeps:
            lines.append("\n<b>–°–æ–Ω:</b>")
            for s in sleeps:
                if s.end_time:
                    lines.append(_format_row("–°–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω", s.end_time, extra=f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ~{int((s.end_time - s.start_time).total_seconds()//60)} –º–∏–Ω"))
                else:
                    lines.append(_format_row("–°–æ–Ω –Ω–∞—á–∞—Ç", s.start_time))

        # 2) –ö–æ—Ä–º–ª–µ–Ω–∏—è
        q_feed = (
            select(Feeding)
            .order_by(desc(Feeding.created_at))
            .limit(CALENDAR_ROWS)
        )
        if baby:
            q_feed = q_feed.where(Feeding.baby_id == baby.id)
        res_feed = await session.execute(q_feed)
        feeds = res_feed.scalars().all()
        if feeds:
            lines.append("\n<b>–ö–æ—Ä–º–ª–µ–Ω–∏–µ:</b>")
            for f in feeds:
                extra = []
                if f.type:
                    extra.append(f.type)
                if f.amount_ml:
                    extra.append(f"{f.amount_ml} –º–ª")
                lines.append(_format_row("–ö–æ—Ä–º–ª–µ–Ω–∏–µ", f.created_at, extra="; ".join(extra)))

        # 3) –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —É—Ö–æ–¥–∞ ‚Äî CareLog (–∫—É–ø–∞–Ω–∏–µ, –ø—Ä–æ–≥—É–ª–∫–∞, —É–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∏ —Ç.–ø.)
        q_care = (
            select(CareLog)
            .order_by(desc(CareLog.created_at))
            .limit(CALENDAR_ROWS)
        )
        if baby:
            q_care = q_care.where(CareLog.baby_id == baby.id)
        res_care = await session.execute(q_care)
        cares = res_care.scalars().all()
        if cares:
            lines.append("\n<b>–£—Ö–æ–¥:</b>")
            for c in cares:
                lines.append(_format_row(c.action or "–î–µ–π—Å—Ç–≤–∏–µ", c.created_at, extra=c.note or ""))

    # –≤—ã–≤–æ–¥–∏–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ
    await message.answer("\n".join(lines) if lines else "–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
