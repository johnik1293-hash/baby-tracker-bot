# app/bot/handlers/calendar.py
from __future__ import annotations
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select, desc
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import CareEvent, User, FamilyMember, Baby

router = Router(name="calendar")

@router.message(Command("calendar"))
async def calendar_last(message: types.Message, session: AsyncSession = get_session()):
    tg_id = message.from_user.id
    u = await session.execute(select(User).where(User.telegram_id == tg_id))
    user = u.scalar_one_or_none()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")
        return

    # –Ω–∞–π–¥—ë–º —Å–µ–º—å—é
    fm = await session.execute(select(FamilyMember.family_id).where(FamilyMember.user_id == user.id))
    row = fm.first()
    if not row:
        await message.answer("–°–µ–º—å—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û—Ç–∫—Ä–æ–π /family –∏ —Å–æ–∑–¥–∞–π/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å.")
        return
    fam_id = row[0]

    # –±–µ—Ä—ë–º —Å–æ–±—ã—Ç–∏—è –∑–∞ 48 —á–∞—Å–æ–≤
    since = datetime.utcnow() - timedelta(hours=48)
    q = (
        select(CareEvent, Baby.name)
        .join(Baby, CareEvent.baby_id == Baby.id, isouter=True)
        .where(CareEvent.family_id == fam_id, CareEvent.occurred_at >= since)
        .order_by(desc(CareEvent.occurred_at))
        .limit(50)
    )
    res = await session.execute(q)

    items = []
    for ce, baby_name in res.all():
        when = ce.occurred_at.strftime("%d.%m %H:%M")
        who = "–∫—Ç–æ-—Ç–æ"
        # –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º User, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        bname = f" ({baby_name})" if baby_name else ""
        details = f" ‚Äì {ce.details}" if ce.details else ""
        items.append(f"{when} ‚Ä¢ {ce.type}{bname}{details}")

    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ 48 —á–∞—Å–æ–≤.")
        return

    await message.answer("üìÖ –°–µ–º–µ–π–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 48—á):\n" + "\n".join(items))
