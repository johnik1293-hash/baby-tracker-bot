from __future__ import annotations

from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, date

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Baby, HealthRecord
from app.db.models import User, Baby, UserSettings  # + –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∞

router = Router(name="health_db")

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------

def temp_kb() -> InlineKeyboardMarkup:
    # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
    row1 = [36.5, 36.8, 37.0]
    row2 = [37.5, 38.0, 38.5]
    row3 = [39.0, 39.5]
    def row(vals): return [InlineKeyboardButton(text=f"{v:.1f}¬∞C", callback_data=f"temp_{v}") for v in vals]
    return InlineKeyboardMarkup(inline_keyboard=[row(row1), row(row2), row(row3)])

async def _get_or_create_user(session: AsyncSession, tg: types.User):
    q = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = q.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name
        )
        session.add(user)
        await session.flush()
    return user

async def _get_primary_baby(session: AsyncSession, user_id: int):
    q = await session.execute(select(Baby).where(Baby.user_id == user_id).limit(1))
    return q.scalar_one_or_none()

# ---------- STATES ----------

class MedicineStates(StatesGroup):
    waiting_text = State()   # "–ù–∞–∑–≤–∞–Ω–∏–µ, –¥–æ–∑–∞ –º–≥" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ"

class GrowthStates(StatesGroup):
    waiting_weight = State()  # –≥—Ä–∞–º–º—ã
    waiting_height = State()  # —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã

class VisitStates(StatesGroup):
    waiting_note = State()    # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞

# ---------- TEMPERATURE ----------

@router.message(F.text == "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
async def health_temperature(message: types.Message):
    kb = temp_kb()
    await message.answer("üå° –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É):", reply_markup=kb)

@router.callback_query(F.data.startswith("temp_"))
async def cb_temperature(callback: types.CallbackQuery):
    value = float(callback.data.split("_")[1])

    async for session in get_session():
        user = await _get_or_create_user(session, callback.from_user)
        baby = await _get_active_baby(session, user.id)
        if not baby:
            await callback.answer()
            await callback.message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª.")
            return

        rec = HealthRecord(
            baby_id=baby.id,
            record_type="temperature",
            temperature_c=value
        )
        session.add(rec)
        await session.commit()

    await callback.answer()
    await callback.message.answer(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: <b>{value:.1f}¬∞C</b>.")

# ---------- MEDICINE ----------

@router.message(F.text == "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞")
async def health_medicine(message: types.Message, state: FSMContext):
    await message.answer(
        "üíä –í–≤–µ–¥–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ (–º–æ–∂–Ω–æ —Å –¥–æ–∑–æ–π):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª 120</code> (–º–≥)\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ: <code>–ò–±—É–ø—Ä–æ—Ñ–µ–Ω</code>"
    )
    await state.set_state(MedicineStates.waiting_text)

@router.message(MedicineStates.waiting_text, F.text)
async def medicine_save(message: types.Message, state: FSMContext):
    text = message.text.strip()
    name, dose = text, None

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —á–∏—Å–ª–æ –º–≥ –∏–∑ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
    parts = text.split()
    if parts and parts[-1].isdigit():
        dose = int(parts[-1])
        name = " ".join(parts[:-1]).strip() or "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ"

    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)
        if not baby:
            await message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª.")
            return

        rec = HealthRecord(
            baby_id=baby.id,
            record_type="medicine",
            medicine_name=name,
            dose_mg=dose
        )
        session.add(rec)
        await session.commit()

    await state.clear()
    suf = f", {dose} –º–≥" if dose else ""
    await message.answer(f"üíä –ó–∞–ø–∏—Å–∞–Ω–æ: <b>{name}{suf}</b>.")

# ---------- DOCTOR VISIT ----------

@router.message(F.text == "–í–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É")
async def health_visit(message: types.Message, state: FSMContext):
    await message.answer("üè• –í–∏–∑–∏—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.\n"
                         "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ù–∞–ø–∏—à–∏—Ç–µ –µ—ë —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")
    await state.set_state(VisitStates.waiting_note)

@router.message(VisitStates.waiting_note, F.text)
async def visit_save_note(message: types.Message, state: FSMContext):
    note = message.text.strip()
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)
        if not baby:
            await message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞.")
            return

        rec = HealthRecord(
            baby_id=baby.id,
            record_type="doctor_visit",
            visit_note=note
        )
        session.add(rec)
        await session.commit()

    await state.clear()
    await message.answer(f"üè• –í–∏–∑–∏—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–º–µ—Ç–∫–∞: <b>{note}</b>")

# ---------- GROWTH / WEIGHT ----------

@router.message(F.text == "–†–æ—Å—Ç/–í–µ—Å")
async def growth_start(message: types.Message, state: FSMContext):
    await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6800):")
    await state.set_state(GrowthStates.waiting_weight)

@router.message(GrowthStates.waiting_weight, F.text)
async def growth_weight(message: types.Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7200")
        return
    await state.update_data(weight_g=int(txt))
    await message.answer("üìè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65):")
    await state.set_state(GrowthStates.waiting_height)

@router.message(GrowthStates.waiting_height, F.text)
async def growth_height(message: types.Message, state: FSMContext):
    txt = message.text.strip()
    if not txt.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 67")
        return
    height_cm = int(txt)
    data = await state.get_data()
    weight_g = int(data.get("weight_g", 0))

    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)
        if not baby:
            await message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞.")
            return

        rec = HealthRecord(
            baby_id=baby.id,
            record_type="growth",
            weight_g=weight_g,
            height_cm=height_cm
        )
        session.add(rec)
        await session.commit()

    await state.clear()
    await message.answer(f"‚úÖ –†–æ—Å—Ç/–≤–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: <b>{weight_g} –≥</b>, <b>{height_cm} —Å–º</b>.")

# ---------- STATS ----------

@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
async def health_stats(message: types.Message):
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)
        if not baby:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞.")
            return

        q = await session.execute(
            select(HealthRecord)
            .where(HealthRecord.baby_id == baby.id)
            .order_by(HealthRecord.created_at.desc())
            .limit(8)
        )
        items = q.scalars().all()

        # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = date.today()
        q_avg_temp = await session.execute(
            select(func.avg(HealthRecord.temperature_c))
            .where(
                HealthRecord.baby_id == baby.id,
                HealthRecord.record_type == "temperature",
                HealthRecord.created_at >= datetime.combine(today, datetime.min.time()),
                HealthRecord.created_at <= datetime.combine(today, datetime.max.time()),
            )
        )
        avg_temp = q_avg_temp.scalar_one_or_none()

    if not items:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –∑–¥–æ—Ä–æ–≤—å—è –µ—â—ë –Ω–µ—Ç.")
        return

    lines = ["ü©∫ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–¥–æ—Ä–æ–≤—å—è:"]
    for r in items:
        t = r.created_at.strftime("%d.%m %H:%M")
        if r.record_type == "temperature":
            lines.append(f"‚Ä¢ {t} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {r.temperature_c:.1f}¬∞C")
        elif r.record_type == "medicine":
            dose = f", {r.dose_mg} –º–≥" if r.dose_mg else ""
            lines.append(f"‚Ä¢ {t} | –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {r.medicine_name}{dose}")
        elif r.record_type == "doctor_visit":
            note = f" ‚Äî {r.visit_note}" if r.visit_note else ""
            lines.append(f"‚Ä¢ {t} | –í–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É{note}")
        elif r.record_type == "growth":
            w = f"{r.weight_g} –≥" if r.weight_g is not None else "‚Äî"
            h = f"{r.height_cm} —Å–º" if r.height_cm is not None else "‚Äî"
            lines.append(f"‚Ä¢ {t} | –†–æ—Å—Ç/–≤–µ—Å: {w}, {h}")

    if avg_temp:
        lines.append(f"\n–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {avg_temp:.2f}¬∞C")

    await message.answer("\n".join(lines))
async def _get_active_baby(session: AsyncSession, user_id: int) -> Baby | None:
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    qs = await session.execute(select(UserSettings).where(UserSettings.user_id == user_id))
    settings = qs.scalar_one_or_none()
    if settings and settings.active_baby_id:
        qb = await session.execute(select(Baby).where(Baby.id == settings.active_baby_id, Baby.user_id == user_id))
        baby = qb.scalar_one_or_none()
        if baby:
            return baby
    # –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–≤—ã–π –ø–æ —Å–ø–∏—Å–∫—É
    qb = await session.execute(select(Baby).where(Baby.user_id == user_id).order_by(Baby.id.asc()).limit(1))
    return qb.scalar_one_or_none()
