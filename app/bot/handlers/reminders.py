from __future__ import annotations

import os
from typing import Optional, Dict

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from sqlalchemy import select

from app.bot.keyboards.common import main_menu_kb
from app.db.database import get_session
from app.db.models import User

router = Router()

WEB_BASE_URL = os.getenv("WEB_BASE_URL")

# –ü—Å–µ–≤–¥–æ-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—Ä–µ–º—è: {user_id: {category: bool}}
# (–ß—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª—è –≤ –ë–î.)
_memory_flags: Dict[int, Dict[str, bool]] = {}

CATEGORIES = [
    ("feed", "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ"),
    ("sleep", "üò¥ –°–æ–Ω"),
    ("diaper", "üß∑ –ü–æ–¥–≥—É–∑–Ω–∏–∫"),
    ("bath", "üõÅ –ö—É–ø–∞–Ω–∏–µ"),
    ("med", "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞"),
]


def _root_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text=label, callback_data=f"settings:cat:{key}")]
        for key, label in CATEGORIES
    ]
    if WEB_BASE_URL:
        rows.append([
            InlineKeyboardButton(
                text="üß© –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=WEB_BASE_URL)
            )
        ])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _cat_kb(user_id: int, key: str) -> InlineKeyboardMarkup:
    enabled = _memory_flags.get(user_id, {}).get(key, True)
    toggle_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å" if enabled else "üîî –í–∫–ª—é—á–∏—Ç—å"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=toggle_text, callback_data=f"settings:cat:{key}:toggle")],
        [InlineKeyboardButton(text="‚è± –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–∫–æ—Ä–æ)", callback_data="noop")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:open")]
    ])


async def _ensure_user(tg_id: int) -> Optional[User]:
    async with get_session() as session:
        res = await session.execute(select(User).where(User.telegram_id == tg_id).limit(1))
        return res.scalar_one_or_none()


@router.message(Command("settings"))
@router.message(F.text.in_({"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def settings_menu(message: types.Message) -> None:
    user = await _ensure_user(message.from_user.id)
    if not user:
        await message.answer("–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=_root_kb())


@router.callback_query(F.data == "settings:open")
async def cb_settings_open(callback: types.CallbackQuery) -> None:
    await callback.answer()
    try:
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=_root_kb()
        )
    except Exception:
        await callback.message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=_root_kb()
        )


@router.callback_query(F.data.startswith("settings:cat:") & ~F.data.endswith(":toggle"))
async def cb_settings_open_category(callback: types.CallbackQuery) -> None:
    await callback.answer()
    parts = callback.data.split(":")
    key = parts[-1]
    label = next((lbl for k, lbl in CATEGORIES if k == key), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    user_id = callback.from_user.id
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç
    _memory_flags.setdefault(user_id, {}).setdefault(key, True)
    kb = _cat_kb(user_id, key)
    text = f"{label}\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª."
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await callback.message.answer(text, reply_markup=kb)


@router.callback_query(F.data.endswith(":toggle"))
async def cb_settings_toggle(callback: types.CallbackQuery) -> None:
    await callback.answer()
    parts = callback.data.split(":")
    # –æ–∂–∏–¥–∞–µ–º settings:cat:<key>:toggle
    if len(parts) < 4:
        return
    key = parts[2]
    user_id = callback.from_user.id
    current = _memory_flags.setdefault(user_id, {}).get(key, True)
    _memory_flags[user_id][key] = not current
    label = next((lbl for k, lbl in CATEGORIES if k == key), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if _memory_flags[user_id][key] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    text = f"{label}\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}."
    try:
        await callback.message.edit_text(text, reply_markup=_cat_kb(user_id, key))
    except Exception:
        await callback.message.answer(text, reply_markup=_cat_kb(user_id, key))


@router.callback_query(F.data.in_({"back:main"}))
async def cb_menu_back(callback: types.CallbackQuery) -> None:
    await callback.answer()
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


@router.callback_query(F.data == "noop")
async def cb_noop(callback: types.CallbackQuery) -> None:
    await callback.answer("–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ üòâ", show_alert=False)
