from __future__ import annotations

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Reminder, Baby

router = Router(name="reminders")

# ---------- helpers ----------

async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    from sqlalchemy import select
    q = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = q.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name,
        )
        session.add(user)
        await session.flush()
    return user

# ---------- FSM ----------

class ReminderOnceStates(StatesGroup):
    waiting_text = State()
    waiting_minutes = State()

class ReminderRepeatStates(StatesGroup):
    waiting_text = State()
    waiting_hours = State()

# ‚ñº –Ω–æ–≤–æ–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
class ReminderEditTextStates(StatesGroup):
    waiting_text = State()   # –∂–¥—ë–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç; –≤ FSM —Ö—Ä–∞–Ω–∏–º rid

class ReminderEditIntervalStates(StatesGroup):
    waiting_minutes = State()  # –∂–¥—ë–º –Ω–æ–≤—ã–µ –º–∏–Ω—É—Ç—ã (0 = –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ)


# ---------- –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ----------

@router.message(F.text == "‚è± –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def list_reminders(message: types.Message):
    async for session in get_session():
        from sqlalchemy import select
        q = await session.execute(
            select(Reminder).where(
                Reminder.chat_id == message.chat.id,
                Reminder.is_active.is_(True)
            ).order_by(Reminder.next_run.asc())
        )
        items = q.scalars().all()

    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for r in items:
        typ = "–ø–æ–≤—Ç–æ—Ä" if r.interval_minutes else "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ"
        when = r.next_run.strftime("%d.%m %H:%M")
        every = f" (–∫–∞–∂–¥—ã–µ {r.interval_minutes} –º–∏–Ω)" if r.interval_minutes else ""
        text = f"‚è± <b>#{r.id}</b> ‚Äî {r.text}\n–¢–∏–ø: {typ}\n–ö–æ–≥–¥–∞: {when}{every}"

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üßπ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"rem_stop_{r.id}"),
                types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem_del_{r.id}"),
            ],
            [
                types.InlineKeyboardButton(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"rem_edit_txt_{r.id}"),
                types.InlineKeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"rem_edit_int_{r.id}"),
            ],
            [
                types.InlineKeyboardButton(text="üîî +15–º", callback_data=f"rem_snooze_{r.id}_15"),
                types.InlineKeyboardButton(text="üîî +30–º", callback_data=f"rem_snooze_{r.id}_30"),
                types.InlineKeyboardButton(text="üîî +60–º", callback_data=f"rem_snooze_{r.id}_60"),
            ],
        ])
        await message.answer(text, reply_markup=kb)

@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚ûï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç)"),
             types.KeyboardButton(text="üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤)")],
            [types.KeyboardButton(text="‚è± –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
             types.KeyboardButton(text="üßπ –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
    )
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)


# ---------- –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ: —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç ----------

@router.message(F.text == "‚ûï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç)")
async def add_once_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–æ–∫–æ—Ä–º–∏—Ç—å —Å–º–µ—Å—å—é¬ª):")
    await state.set_state(ReminderOnceStates.waiting_text)

@router.message(ReminderOnceStates.waiting_text, F.text)
async def add_once_text(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return
    await state.update_data(text=text)
    await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30")
    await state.set_state(ReminderOnceStates.waiting_minutes)

@router.message(ReminderOnceStates.waiting_minutes, F.text)
async def add_once_minutes(message: types.Message, state: FSMContext):
    s = message.text.strip()
    if not s.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: 45")
        return
    minutes = int(s)
    data = await state.get_data()
    text = data["text"]

    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        remind_at = datetime.now() + timedelta(minutes=minutes)
        session.add(Reminder(
            user_id=user.id,
            chat_id=message.chat.id,
            text=text,
            next_run=remind_at,
            interval_minutes=None,  # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
            is_active=True,
        ))
        await session.commit()

    await state.clear()
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω: ¬´{text}¬ª")

# ---------- –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è: –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤ ----------

@router.message(F.text == "üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤)")
async def add_repeat_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–î–∞—Ç—å –≤–æ–¥—É¬ª):")
    await state.set_state(ReminderRepeatStates.waiting_text)

@router.message(ReminderRepeatStates.waiting_text, F.text)
async def add_repeat_text(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return
    await state.update_data(text=text)
    await message.answer("–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä—è—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
    await state.set_state(ReminderRepeatStates.waiting_hours)

@router.message(ReminderRepeatStates.waiting_hours, F.text)
async def add_repeat_hours(message: types.Message, state: FSMContext):
    s = message.text.strip()
    if not s.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: 4")
        return
    hours = int(s)
    minutes = hours * 60
    data = await state.get_data()
    text = data["text"]

    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        first_time = datetime.now() + timedelta(minutes=minutes)
        session.add(Reminder(
            user_id=user.id,
            chat_id=message.chat.id,
            text=text,
            next_run=first_time,
            interval_minutes=minutes,  # –ø–æ–≤—Ç–æ—Ä
            is_active=True,
        ))
        await session.commit()

    await state.clear()
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ {hours} —á: ¬´{text}¬ª")

# ---------- –ü—Ä–æ—Å–º–æ—Ç—Ä/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ ----------

@router.message(F.text == "‚è± –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def list_reminders(message: types.Message):
    async for session in get_session():
        from sqlalchemy import select
        q = await session.execute(
            select(Reminder).where(Reminder.chat_id == message.chat.id, Reminder.is_active.is_(True)).order_by(Reminder.next_run.asc())
        )
        items = q.scalars().all()

    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    lines = ["‚è± –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"]
    for r in items:
        typ = "–ø–æ–≤—Ç–æ—Ä" if r.interval_minutes else "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ"
        when = r.next_run.strftime("%d.%m %H:%M")
        every = f" (–∫–∞–∂–¥—ã–µ {r.interval_minutes} –º–∏–Ω)" if r.interval_minutes else ""
        lines.append(f"‚Ä¢ {r.id}. {r.text} ‚Äî {typ}: {when}{every}")

    await message.answer("\n".join(lines))

@router.message(F.text == "üßπ –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def disable_all(message: types.Message):
    async for session in get_session():
        q = await session.execute(
            select(Reminder).where(Reminder.chat_id == message.chat.id, Reminder.is_active.is_(True))
        )
        items = q.scalars().all()
        for r in items:
            r.is_active = False
        if items:
            await session.commit()

    await message.answer("üßπ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
@router.callback_query(F.data.startswith("rem_stop_"))
async def stop_reminder(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[-1])
    changed = False
    async for session in get_session():
        from sqlalchemy import select
        q = await session.execute(
            select(Reminder).where(
                Reminder.id == rid,
                Reminder.chat_id == callback.message.chat.id,
                Reminder.is_active.is_(True)
            )
        )
        r = q.scalar_one_or_none()
        if r:
            r.is_active = False
            await session.commit()
            changed = True

    await callback.answer()
    await callback.message.edit_text(f"‚ùé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –æ—Ç–∫–ª—é—á–µ–Ω–æ." if changed else f"‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ/—É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")

@router.callback_query(F.data.startswith("rem_del_"))
async def delete_reminder(callback: types.CallbackQuery):
    rid = int(callback.data.split("_")[-1])
    removed = False
    async for session in get_session():
        from sqlalchemy import select
        q = await session.execute(
            select(Reminder).where(
                Reminder.id == rid,
                Reminder.chat_id == callback.message.chat.id
            )
        )
        r = q.scalar_one_or_none()
        if r:
            # –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –ø—Ä–æ—Å—Ç–æ is_active = False (—á—Ç–æ–±—ã –≤–æ—Ä–∫–µ—Ä –Ω–µ —Ç—Ä–æ–≥–∞–ª)
            r.is_active = False
            await session.commit()
            removed = True
    await callback.answer()
    await callback.message.edit_text(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} —É–¥–∞–ª–µ–Ω–æ." if removed else f"‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
@router.callback_query(F.data.startswith("rem_edit_txt_"))
async def edit_text_start(callback: types.CallbackQuery, state: FSMContext):
    rid = int(callback.data.split("_")[-1])
    await state.update_data(edit_rid=rid)
    await callback.answer()
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è #{rid}:")
    await state.set_state(ReminderEditTextStates.waiting_text)

@router.message(ReminderEditTextStates.waiting_text, F.text)
async def edit_text_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rid = int(data.get("edit_rid"))
    new_text = message.text.strip()
    if not new_text:
        await message.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        return

    updated = False
    async for session in get_session():
        from sqlalchemy import select
        q = await session.execute(
            select(Reminder).where(
                Reminder.id == rid,
                Reminder.chat_id == message.chat.id,
                Reminder.is_active.is_(True)
            )
        )
        r = q.scalar_one_or_none()
        if r:
            r.text = new_text
            await session.commit()
            updated = True

    await state.clear()
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω: ¬´{new_text}¬ª" if updated else f"‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
@router.callback_query(F.data.startswith("rem_snooze_"))
async def snooze_reminder(callback: types.CallbackQuery):
    _, _, rid_str, mins_str = callback.data.split("_")
    rid = int(rid_str)
    add_min = int(mins_str)

    from datetime import datetime, timedelta
    changed = False
    async for session in get_session():
        from sqlalchemy import select
        q = await session.execute(
            select(Reminder).where(
                Reminder.id == rid,
                Reminder.chat_id == callback.message.chat.id,
                Reminder.is_active.is_(True)
            )
        )
        r = q.scalar_one_or_none()
        if r:
            r.next_run = datetime.now() + timedelta(minutes=add_min)
            await session.commit()
            changed = True

    await callback.answer()
    await callback.message.edit_text(
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {add_min} –º–∏–Ω."
        if changed else f"‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ."
    )

