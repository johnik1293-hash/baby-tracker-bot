from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from app.core.config import settings
from app.bot.keyboards.common import main_menu_kb
from app.db.database import get_session
from sqlalchemy import select
from app.db.models import User

router = Router()


def _settings_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –≤–∫–ª/–≤—ã–∫–ª", callback_data="rem:toggle")],
    ]
    if getattr(settings, "WEB_BASE_URL", None):
        rows.append([
            InlineKeyboardButton(
                text="üß© –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=settings.WEB_BASE_URL),
            )
        ])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def _get_user(session, tg_id: int) -> User | None:
    res = await session.execute(select(User).where(User.telegram_id == tg_id).limit(1))
    return res.scalar_one_or_none()


@router.message(Command("settings"))
@router.message(F.text.in_({"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def settings_menu(message: types.Message):
    async with get_session() as session:
        user = await _get_user(session, message.from_user.id)
        if not user:
            await message.answer("–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return

    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=_settings_kb())


@router.callback_query(F.data == "rem:toggle")
async def settings_toggle_reminders(callback: types.CallbackQuery):
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    # –°–µ–π—á–∞—Å –æ—Å—Ç–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç.
    await callback.answer("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", show_alert=False)
    try:
        await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=_settings_kb())
    except Exception:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ
        await callback.message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=_settings_kb())


@router.callback_query(F.data.in_({"back:main", "rem:back", "settings:back"}))
async def cb_menu_back(callback: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ menu.py (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ/–±–∏—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã)
    await callback.answer()
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
