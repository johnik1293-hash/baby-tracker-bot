# app/bot/handlers/reminders.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import AsyncSessionLocal
from app.db.models import User  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å —É–∂–µ –µ—Å—Ç—å

router = Router(name=__name__)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =====

async def _ensure_user(tg_id: int) -> User:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î."""
    async with AsyncSessionLocal() as session:  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º get_session()
        u = await session.scalar(select(User).where(User.telegram_id == tg_id))
        if u:
            return u
        u = User(telegram_id=tg_id)
        session.add(u)
        await session.commit()
        await session.refresh(u)
        return u


def _settings_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    # –í–µ—Ä–Ω—É–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî –∫–æ–ª–ª–±–µ–∫–∏ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏.
    kb.button(text="‚è∞ –ö–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="remind:feed")
    kb.button(text="üß∑ –ü–æ–¥–≥—É–∑–Ω–∏–∫", callback_data="remind:diaper")
    kb.button(text="üò¥ –°–æ–Ω", callback_data="remind:sleep")
    kb.button(text="üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", callback_data="remind:walk")
    kb.button(text="üõÅ –ö—É–ø–∞–Ω–∏–µ", callback_data="remind:bath")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:back")
    kb.adjust(2, 2, 1)
    return kb


# ===== –•–ï–ù–î–õ–ï–†–´ =====

@router.message(F.text.in_({"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def settings_menu(message: Message) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await _ensure_user(message.from_user.id)
    kb = _settings_kb()
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        "‚Äî –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
        "–ü–æ–∫–∞ –±–µ–∑ —Ç–æ–Ω–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤; –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.",
        reply_markup=kb.as_markup(),
    )


@router.callback_query(F.data == "settings:back")
async def cb_menu_back(callback: CallbackQuery) -> None:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await callback.answer()


# –ù–∏–∂–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏.
# –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ñ–ª–∞–≥–∏ –≤ –ë–î ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É/–ø–æ–ª—è —É User –∏ commit.

async def _toggle_stub(session: AsyncSession, user: User, field: str) -> bool:
    """–ó–∞–≥–ª—É—à–∫–∞: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True (–≤–∫–ª—é—á–µ–Ω–æ)."""
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏:
    # current = getattr(user, field, False)
    # setattr(user, field, not current)
    # await session.commit()
    return True

async def _toggle_and_notify(callback: CallbackQuery, field: str, title: str) -> None:
    async with AsyncSessionLocal() as session:
        user = await _ensure_user(callback.from_user.id)
        enabled = await _toggle_stub(session, user, field)
    await callback.answer(f"{title}: {'–≤–∫–ª—é—á–µ–Ω–æ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}", show_alert=False)

@router.callback_query(F.data == "remind:feed")
async def remind_feed(callback: CallbackQuery) -> None:
    await _toggle_and_notify(callback, "remind_feed", "–ö–æ—Ä–º–ª–µ–Ω–∏–µ")

@router.callback_query(F.data == "remind:diaper")
async def remind_diaper(callback: CallbackQuery) -> None:
    await _toggle_and_notify(callback, "remind_diaper", "–ü–æ–¥–≥—É–∑–Ω–∏–∫")

@router.callback_query(F.data == "remind:sleep")
async def remind_sleep(callback: CallbackQuery) -> None:
    await _toggle_and_notify(callback, "remind_sleep", "–°–æ–Ω")

@router.callback_query(F.data == "remind:walk")
async def remind_walk(callback: CallbackQuery) -> None:
    await _toggle_and_notify(callback, "remind_walk", "–ü—Ä–æ–≥—É–ª–∫–∞")

@router.callback_query(F.data == "remind:bath")
async def remind_bath(callback: CallbackQuery) -> None:
    await _toggle_and_notify(callback, "remind_bath", "–ö—É–ø–∞–Ω–∏–µ")
