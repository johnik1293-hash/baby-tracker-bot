from __future__ import annotations

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select

from app.db.database import get_session
from app.db.models import User  # –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ RemindersSettings ‚Äî –ø–æ–¥–∫–ª—é—á–∏ –∏ –µ—ë

router = Router(name="reminders")

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def reminders_root_kb(enabled: bool) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ" if enabled else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–´–ö–õ"),
                callback_data=("rem_toggle_off" if enabled else "rem_toggle_on")
            )
        ],
        [InlineKeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è", callback_data="rem_feeding")],
        [InlineKeyboardButton(text="üò¥ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–Ω–∞", callback_data="rem_sleep")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu_back")],
    ])

def back_to_settings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="rem_back")]
    ])

# --- —É—Ç–∏–ª–∏—Ç—ã ---

async def _get_or_create_user(tg_user: types.User):
    async for session in get_session():
        res = await session.execute(select(User).where(User.telegram_id == tg_user.id))
        u = res.scalar_one_or_none()
        if not u:
            u = User(
                telegram_id=tg_user.id,
                username=tg_user.username,
                first_name=tg_user.first_name,
                last_name=tg_user.last_name
            )
            session.add(u)
            await session.commit()
        return u

# --- entry point –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã ---

@router.message(F.text.in_({"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def open_settings(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –≤–∫–ª—é—á–µ–Ω–æ=True
    enabled = True
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.",
        reply_markup=reminders_root_kb(enabled),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "rem_back")
async def cb_back(cb: CallbackQuery):
    await cb.answer()
    await open_settings(cb.message)

@router.callback_query(F.data == "menu_back")
async def cb_menu_back(cb: CallbackQuery):
    from app.bot.handlers.menu import main_menu  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
    await cb.answer()
    await main_menu(cb.message)

# --- –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (MVP-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ User.can_notify, –µ—Å–ª–∏ –µ—Å—Ç—å) ---

@router.callback_query(F.data.in_({"rem_toggle_on", "rem_toggle_off"}))
async def toggle_notifications(cb: CallbackQuery):
    turn_on = cb.data == "rem_toggle_on"
    async for session in get_session():
        res = await session.execute(select(User).where(User.telegram_id == cb.from_user.id))
        u = res.scalar_one_or_none()
        if not u:
            u = await _get_or_create_user(cb.from_user)

        # –ï—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ User –µ—Å—Ç—å –ø–æ–ª–µ can_notify (Boolean) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(u, "can_notify"):
            u.can_notify = turn_on
            session.add(u)
            await session.commit()

    await cb.answer("–ì–æ—Ç–æ–≤–æ")
    await open_settings(cb.message)

# --- –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) ---

@router.callback_query(F.data == "rem_feeding")
async def rem_feeding(cb: CallbackQuery):
    await cb.answer()
    await cb.message.answer(
        "üçº –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è (MVP):\n"
        "‚Äî –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–æ–±–∞–≤–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ.\n"
        "‚Äî –¥–µ—Ñ–æ–ª—Ç: –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –¥–Ω—ë–º –∏ 4 —á–∞—Å–∞ –Ω–æ—á—å—é.",
        reply_markup=back_to_settings_kb()
    )

@router.callback_query(F.data == "rem_sleep")
async def rem_sleep(cb: CallbackQuery):
    await cb.answer()
    await cb.message.answer(
        "üò¥ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–Ω–∞ (MVP):\n"
        "‚Äî –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–æ–±–∞–≤–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ.\n"
        "‚Äî –¥–µ—Ñ–æ–ª—Ç: –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏–µ 60‚Äì90 –º–∏–Ω—É—Ç (0‚Äì3 –º–µ—Å).",
        reply_markup=back_to_settings_kb()
    )
