from __future__ import annotations

import os
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext  # <-- –¥–æ–±–∞–≤–∏–ª–∏
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
)

from app.bot.keyboards.common import main_menu_kb
from app.bot.handlers.family import family_menu
from app.bot.handlers.calendar import calendar_last
from app.bot.handlers.children import children_entry  # <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º entry

router = Router(name="menu")

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)
BTN_SLEEP = "üõå –°–æ–Ω"
BTN_FEED = "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ"
BTN_CHILD = "üë∂ –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞"
BTN_FAMILY = "üë®‚Äçüë©‚Äçüëß –°–µ–º—å—è"
BTN_CALENDAR = "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"
BTN_SETTINGS = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
BTN_MAIN = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

# --- –†–∞–∑–¥–µ–ª ¬´–°–æ–Ω¬ª ---
@router.message(F.text.in_({BTN_SLEEP, "–°–æ–Ω"}))
async def section_sleep(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—á–∞–ª —Å–ø–∞—Ç—å"), KeyboardButton(text="–ü—Ä–æ—Å–Ω—É–ª—Å—è")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞"), KeyboardButton(text=BTN_MAIN)],
        ],
        resize_keyboard=True,
    )
    await message.answer("–¢—Ä–µ–∫–µ—Ä —Å–Ω–∞.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# --- –†–∞–∑–¥–µ–ª ¬´–ö–æ—Ä–º–ª–µ–Ω–∏–µ¬ª ---
@router.message(F.text.in_({BTN_FEED, "–ö–æ—Ä–º–ª–µ–Ω–∏–µ"}))
async def section_feeding(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ"), KeyboardButton(text="–°–º–µ—Å—å")],
            [KeyboardButton(text="–ü—Ä–∏–∫–æ—Ä–º"), KeyboardButton(text="–í–æ–¥–∞")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è"), KeyboardButton(text=BTN_MAIN)],
        ],
        resize_keyboard=True,
    )
    await message.answer("–¢—Ä–µ–∫–µ—Ä –∫–æ—Ä–º–ª–µ–Ω–∏—è.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# --- –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ ---
@router.message(F.text.in_({BTN_CHILD, "–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞"}))
async def open_children_via_button(message: types.Message, state: FSMContext):  # <-- –ø—Ä–∏–Ω–∏–º–∞–µ–º state
    await children_entry(message, state)  # <-- –ø–µ—Ä–µ–¥–∞—ë–º state –¥–∞–ª—å—à–µ

# --- –†–∞–∑–¥–µ–ª ¬´–ó–¥–æ—Ä–æ–≤—å–µ¬ª (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å) ---
@router.message(F.text.in_({"–ó–¥–æ—Ä–æ–≤—å–µ"}))
async def section_health(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"), KeyboardButton(text="–õ–µ–∫–∞—Ä—Å—Ç–≤–∞")],
            [KeyboardButton(text="–í–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É"), KeyboardButton(text="–†–æ—Å—Ç/–í–µ—Å")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"), KeyboardButton(text=BTN_MAIN)],
        ],
        resize_keyboard=True,
    )
    await message.answer("–î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å (—Å–µ–º–µ–π–Ω—ã–π –∂—É—Ä–Ω–∞–ª) ---
@router.message(F.text.in_({BTN_CALENDAR, "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"}))
async def open_calendar_via_button(message: types.Message):
    await calendar_last(message)

# --- –°–µ–º—å—è (—Å–æ–∑–¥–∞—Ç—å/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è) ---
@router.message(F.text.in_({BTN_FAMILY, "–°–µ–º—å—è"}))
async def open_family_via_button(message: types.Message):
    await family_menu(message)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
@router.message(F.text.in_({BTN_SETTINGS, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def section_settings(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. ‚öôÔ∏è")

# --- –ö–Ω–æ–ø–∫–∞ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ---
@router.message(F.text == BTN_MAIN)
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb())

# --- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()

def webapp_open_kb(url: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=url))
    ]])

@router.message(F.text == "–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def open_mini_app(message: types.Message):
    if not WEBAPP_URL or not WEBAPP_URL.startswith("https://"):
        await message.answer("‚ö†Ô∏è WebApp URL –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ HTTPS. –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBAPP_URL.")
        return
    await message.answer("–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá", reply_markup=webapp_open_kb(WEBAPP_URL))
