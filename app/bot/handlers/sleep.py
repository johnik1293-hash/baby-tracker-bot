from __future__ import annotations

from datetime import datetime
from typing import Optional

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.database import get_session
from app.db.models import User, Baby, SleepRecord, UserSettings
from app.services.carelog import log_event

router = Router(name="sleep_db")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def sleep_inline_quality_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ üò¥", callback_data="quality_good"),
            InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–æ üôÇ", callback_data="quality_ok"),
            InlineKeyboardButton(text="–ë–µ—Å–ø–æ–∫–æ–π–Ω–æ üòï", callback_data="quality_bad"),
        ]
    ])

async def _get_or_create_user(session: AsyncSession, tg: types.User) -> User:
    q = await session.execute(select(User).where(User.telegram_id == tg.id))
    user = q.scalar_one_or_none()
    if not user:
        user = User(
            telegram_id=tg.id,
            username=tg.username,
            first_name=tg.first_name,
            last_name=tg.last_name
        )
        session.add(user)
        await session.flush()
    return user

async def _get_active_baby(session: AsyncSession, user_id: int) -> Optional[Baby]:
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    qs = await session.execute(select(UserSettings).where(UserSettings.user_id == user_id))
    settings = qs.scalar_one_or_none()
    if settings and settings.active_baby_id:
        qb = await session.execute(select(Baby).where(Baby.id == settings.active_baby_id, Baby.user_id == user_id))
        baby = qb.scalar_one_or_none()
        if baby:
            return baby
    # –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–≤—ã–π –ø–æ —Å–ø–∏—Å–∫—É
    qb = await session.execute(select(Baby).where(Baby.user_id == user_id).order_by(Baby.id.asc()).limit(1))
    return qb.scalar_one_or_none()

async def _get_open_sleep(session: AsyncSession, baby_id: int) -> Optional[SleepRecord]:
    q = await session.execute(
        select(SleepRecord)
        .where(SleepRecord.baby_id == baby_id, SleepRecord.sleep_end.is_(None))
        .order_by(SleepRecord.sleep_start.desc())
        .limit(1)
    )
    return q.scalar_one_or_none()

# --- –•–ï–ù–î–õ–ï–†–´ ---

@router.message(F.text == "–ù–∞—á–∞–ª —Å–ø–∞—Ç—å")
async def sleep_start(message: types.Message):
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)

        if not baby:
            await message.answer(
                "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞: ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª ‚Üí –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."
            )
            return

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∑–∞–ø–∏—Å—å —Å–Ω–∞ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä—É—é
        open_rec = await _get_open_sleep(session, baby.id)
        if open_rec:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—á–∞–ª–æ —Å–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ—Å–Ω—É–ª—Å—è¬ª, –∫–æ–≥–¥–∞ —Ä–µ–±—ë–Ω–æ–∫ –ø—Ä–æ—Å–Ω—ë—Ç—Å—è.")
            return

        rec = SleepRecord(baby_id=baby.id, sleep_start=datetime.now())
        session.add(rec)
        await session.commit()

        # –õ–æ–≥ –≤ —Å–µ–º–µ–π–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await log_event(session, actor_user_id=user.id, event_type="sleep_start", details="—Å—Ç–∞—Ä—Ç —Å–Ω–∞", baby_id=baby.id)

    await message.answer("üõå –ó–∞—Å—ã–ø–∞–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –ö–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω—ë—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ—Å–Ω—É–ª—Å—è¬ª.")

@router.message(F.text == "–ü—Ä–æ—Å–Ω—É–ª—Å—è")
async def sleep_end(message: types.Message):
    async for session in get_session():
        user = await _get_or_create_user(session, message.from_user)
        baby = await _get_active_baby(session, user.id)

        if not baby:
            await message.answer(
                "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞: ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª ‚Üí –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."
            )
            return

        rec = await _get_open_sleep(session, baby.id)
        if not rec:
            await message.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—á–∞–ª–µ —Å–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞–ª —Å–ø–∞—Ç—å¬ª.")
            return

        rec.sleep_end = datetime.now()
        rec.duration_minutes = int((rec.sleep_end - rec.sleep_start).total_seconds() // 60)
        await session.commit()

        minutes = rec.duration_minutes or 0
        # –õ–æ–≥ –≤ —Å–µ–º–µ–π–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await log_event(session, actor_user_id=user.id, event_type="sleep_end", details=f"—Å–æ–Ω {minutes} –º–∏–Ω", baby_id=baby.id)

        hours = minutes // 60
        mins = minutes % 60

    await message.answer(
        f"‚úÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ!\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {mins}–º\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞:",
        reply_markup=sleep_inline_quality_kb()
    )

@router.callback_query(F.data.startswith("quality_"))
async def sleep_quality(callback: types.CallbackQuery):
    quality = callback.data.replace("quality_", "")  # good|ok|bad

    async for session in get_session():
        user = await _get_or_create_user(session, callback.from_user)
        baby = await _get_active_baby(session, user.id)
        if not baby:
            await callback.answer()
            await callback.message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞¬ª.")
            return

        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        q = await session.execute(
            select(SleepRecord)
            .where(SleepRecord.baby_id == baby.id, SleepRecord.sleep_end.is_not(None))
            .order_by(SleepRecord.sleep_end.desc())
            .limit(1)
        )
        rec = q.scalar_one_or_none()
        if not rec:
            await callback.answer()
            await callback.message.answer("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.")
            return

        rec.quality = quality
        await session.commit()

    mapping = {"good": "–û—Ç–ª–∏—á–Ω–æ üò¥", "ok": "–ù–æ—Ä–º–∞–ª—å–Ω–æ üôÇ", "bad": "–ë–µ—Å–ø–æ–∫–æ–π–Ω–æ üòï"}
    human = mapping.get(quality, quality)
    await callback.answer()
    await callback.message.answer(f"–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: <b>{human}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
